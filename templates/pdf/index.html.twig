<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>PDF Parser</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <style>
            .result-container {
                margin-top: 20px;
                padding: 15px;
                border: 1px solid #ddd;
                border-radius: 5px;
                background-color: #f8f9fa;
                display: none;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            .error-message {
                color: #dc3545;
                margin-top: 10px;
                display: none;
            }
            .table-preview {
                margin-top: 20px;
            }
            .table-preview table {
                width: 100%;
                border-collapse: collapse;
            }
            .table-preview th, .table-preview td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
            }
            .table-preview th {
                background-color: #f8f9fa;
            }
        </style>
    </head>
    <body>
        <div class="container mt-5">
            <h1 class="mb-4">PDF Parser</h1>
            
            <div class="card">
                <div class="card-body">
                    <form id="pdfForm" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="pdfFile" class="form-label">Select PDF File</label>
                            <input type="file" class="form-control" id="pdfFile" name="pdf" accept="application/pdf" required>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Select Operation</label>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="operation" id="parseText" value="parse" checked>
                                <label class="form-check-label" for="parseText">
                                    Parse Text
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="operation" id="getDetails" value="details">
                                <label class="form-check-label" for="getDetails">
                                    Get PDF Details
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="operation" id="extractTables" value="tables">
                                <label class="form-check-label" for="extractTables">
                                    Extract Tables
                                </label>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary">Process PDF</button>
                    </form>

                    <div class="loading">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Processing PDF...</p>
                    </div>

                    <div class="error-message"></div>

                    <div class="result-container">
                        <h3>Result:</h3>
                        <div id="tablePreview" class="table-preview"></div>
                        <pre id="resultContent"></pre>
                    </div>
                </div>
            </div>
        </div>

        <script>
            document.getElementById('pdfForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const form = e.target;
                const formData = new FormData(form);
                const operation = formData.get('operation');
                const file = formData.get('pdf');
                
                if (!file) {
                    showError('Please select a PDF file');
                    return;
                }

                // Show loading
                document.querySelector('.loading').style.display = 'block';
                document.querySelector('.error-message').style.display = 'none';
                document.querySelector('.result-container').style.display = 'none';
                document.getElementById('tablePreview').innerHTML = '';

                try {
                    const response = await fetch(`/api/pdf/${operation}`, {
                        method: 'POST',
                        body: formData
                    });

                    let data;
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        data = await response.json();
                    } else {
                        throw new Error('Server returned non-JSON response');
                    }

                    if (!response.ok) {
                        throw new Error(data.error || 'Failed to process PDF');
                    }

                    // Display result
                    const resultContainer = document.querySelector('.result-container');
                    const resultContent = document.getElementById('resultContent');
                    const tablePreview = document.getElementById('tablePreview');
                    
                    if (operation === 'tables') {
                        // Display tables in a more readable format
                        let tablesHtml = '';
                        for (const [pageKey, pageTables] of Object.entries(data.tables)) {
                            tablesHtml += `<h4>${pageKey}</h4>`;
                            pageTables.forEach((table, index) => {
                                tablesHtml += `<h5>Table ${index + 1}</h5>`;
                                tablesHtml += '<table class="table table-bordered">';
                                
                                // Headers
                                tablesHtml += '<thead><tr>';
                                table.headers.forEach(header => {
                                    tablesHtml += `<th>${header}</th>`;
                                });
                                tablesHtml += '</tr></thead>';
                                
                                // Rows
                                tablesHtml += '<tbody>';
                                table.rows.forEach(row => {
                                    tablesHtml += '<tr>';
                                    table.headers.forEach(header => {
                                        tablesHtml += `<td>${row[header] || ''}</td>`;
                                    });
                                    tablesHtml += '</tr>';
                                });
                                tablesHtml += '</tbody></table>';
                            });
                        }
                        tablePreview.innerHTML = tablesHtml;
                        resultContent.textContent = JSON.stringify(data.tables, null, 2);
                    } else if (operation === 'parse') {
                        resultContent.textContent = data.text;
                    } else {
                        resultContent.textContent = JSON.stringify(data.details, null, 2);
                    }
                    
                    resultContainer.style.display = 'block';
                } catch (error) {
                    showError(error.message);
                } finally {
                    document.querySelector('.loading').style.display = 'none';
                }
            });

            function showError(message) {
                const errorElement = document.querySelector('.error-message');
                errorElement.textContent = message;
                errorElement.style.display = 'block';
            }
        </script>
    </body>
</html> 